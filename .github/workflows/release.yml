name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 paramiko colorama tomli schedule

      - name: Generate version
        id: generate-version
        run: |
          # Get current date and format it as YYYY.MM
          CURRENT_DATE=$(date +%Y.%m)
          # Get latest tag and extract release number
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
          LATEST_RELEASE_NUMBER=$(echo "$LATEST_TAG" | cut -d '.' -f 3 | cut -d 'v' -f 2)
          # Increment release number if same month, otherwise reset to 0
          if [[ "$(date +%Y.%m)" == "$(echo "$LATEST_TAG" | cut -d '.' -f 1,2 | cut -d 'v' -f 2)" ]]; then
            RELEASE_NUMBER=$((LATEST_RELEASE_NUMBER + 1))
          else
            RELEASE_NUMBER=0
          fi
          # Set VERSION environment variable
          VERSION="v$CURRENT_DATE.$RELEASE_NUMBER"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # Update Chart.yaml with new version
          sed -i "s/^version:.*$/version: ${VERSION#v}/" charts/mikrotik-backup/Chart.yaml
          sed -i "s/^appVersion:.*$/appVersion: \"${VERSION#v}\"/" charts/mikrotik-backup/Chart.yaml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/thekoma/mikrotik-backup/app
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}

      - name: Login to GitHub Container Registry (Helm)
        run: echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Chart | Push
        uses: appany/helm-oci-chart-releaser@v0.3.0
        with:
          name: mikrotik-backup
          repository: thekoma/mikrotik-backup/charts
          tag: ${{ env.VERSION }}
          app_version: ${{ env.VERSION }}
          path: charts/mikrotik-backup
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          update_dependencies: 'true'

      - name: Generate Release Notes
        run: |
          # Remove 'v' prefix for version number
          VERSION_WITHOUT_V="${VERSION#v}"
          cat << EOF > release_notes.md
          ## ðŸš€ Release ${{ env.VERSION }}

          ### ðŸ“¦ Container Images
          The following multi-architecture container images are available:
          - \`ghcr.io/thekoma/mikrotik-backup/app:${{ env.VERSION }}\` (recommended for production)
          - \`ghcr.io/thekoma/mikrotik-backup/app:latest\` (latest version)

          Supported architectures:
          - linux/amd64 (Intel/AMD 64-bit)
          - linux/arm64 (ARM 64-bit)
          - linux/arm/v7 (ARM 32-bit)

          ### ðŸ“‹ Installation Examples

          #### Docker Compose
          \`\`\`yaml
          services:
            mikrotik-backup:
              image: ghcr.io/thekoma/mikrotik-backup/app:${{ env.VERSION }}
              volumes:
                - ./config.toml:/app/config.toml:ro
                - ./mikrotik-rsa:/mikrotik-rsa:ro
              environment:
                - TZ=Europe/Rome
          \`\`\`

          #### Kubernetes with Helm
          \`\`\`bash
          # Install using Helm
          helm install mikrotik-backup oci://ghcr.io/thekoma/mikrotik-backup/charts --version ${VERSION_WITHOUT_V}
          \`\`\`

          #### Systemd Service
          \`\`\`ini
          [Unit]
          Description=Mikrotik Backup Service

          [Service]
          ExecStart=/usr/local/bin/mikrotik-backup
          User=mikrotik-backup
          WorkingDirectory=/etc/mikrotik-backup

          [Install]
          WantedBy=multi-user.target
          \`\`\`

          For more detailed installation and configuration instructions, please refer to the [README](https://github.com/thekoma/mikrotik-backup#readme).
          EOF

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: release_notes.md