{{- if eq .Values.deploymentMode "cronjob" }}
{{- range .Values.backup.times }}
{{- $time := . }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mikrotik-backup.fullname" $ }}-{{ replace ":" "" $time }}
  labels:
    {{- include "mikrotik-backup.labels" $ | nindent 4 }}
spec:
  schedule: "{{ (split ":" $time)._0 }} {{ (split ":" $time)._1 }} * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: {{ $.Chart.Name }}
              image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
              imagePullPolicy: {{ $.Values.image.pullPolicy }}
              command: ["python"]
              args:
                - "/app/backup.py"
                - "--jobs"
                - "{{ $.Values.backup.jobs }}"
                - "--key"
                - "{{ $.Values.ssh.keyPath }}"
              env:
                - name: TZ
                  value: {{ $.Values.timezone }}
                {{- if $.Values.storage.existingSecret }}
                - name: MIKROTIK_S3_TYPE
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.storage.existingSecret }}
                      key: s3-type
                - name: MIKROTIK_S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.storage.existingSecret }}
                      key: s3-bucket
                - name: MIKROTIK_S3_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.storage.existingSecret }}
                      key: s3-endpoint
                - name: MIKROTIK_S3_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.storage.existingSecret }}
                      key: access-key
                - name: MIKROTIK_S3_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.storage.existingSecret }}
                      key: secret-key
                {{- end }}
                {{- if $.Values.ssh.existingSecret }}
                - name: MIKROTIK_SSH_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ $.Values.ssh.existingSecret }}
                      key: username
                {{- end }}
              volumeMounts:
                - name: config
                  mountPath: /etc/mikrotik_backup.toml
                  subPath: config.toml
                - name: ssh-key
                  mountPath: {{ $.Values.ssh.keyPath }}
                  subPath: ssh-key
              resources:
                {{- toYaml $.Values.resources | nindent 16 }}
          volumes:
            - name: config
              secret:
                secretName: {{ include "mikrotik-backup.fullname" $ }}-config
            - name: ssh-key
              secret:
                secretName: {{ include "mikrotik-backup.sshSecretName" $ }}
                defaultMode: 0600
          restartPolicy: OnFailure
---
{{- end }}
{{- end }}
